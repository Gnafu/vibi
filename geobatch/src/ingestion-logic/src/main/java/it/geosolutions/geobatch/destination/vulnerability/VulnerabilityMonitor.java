package it.geosolutions.geobatch.destination.vulnerability;

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class VulnerabilityMonitor {

	public static class Message {
		public Message(TYPE type, String content, Throwable e) {
			this.type = type;
			this.content = content;
			this.exception = e;
		}
		public Message(TYPE type) {
			this.type = type;
		}
		public Message(TYPE type, String content) {
			this.type = type;
			this.content = content;
		}
		private String content;
		private Throwable exception;
		private TYPE type;
		public enum TYPE {
			ERROR, FINISH, CLOSE, PROGRESS
		}
		public String getContent() {
			return content;
		}
		public Throwable getException() {
			return exception;
		}
		public TYPE getType() {
			return type;
		};
		
		
	} 
	
	/** total number of arcs to be calculated **/
	private int total = 0;
	
	/** id of the db trace for the current import **/
	private int trace = 0;
	
	/** Errors existing at start of calculations */
    private int startErrors = 0;
	
    /** Counter indicating how many Features have been calculated */
    private AtomicInteger loopCounter = new AtomicInteger(0);

    /** Counter indicating the number of errors returned */
    private AtomicInteger errors = new AtomicInteger(0);

    /** Double indicating the current distance calculated when the calculations have been stopped */
    //private double currentDistance = 0;

    /** String containing the name of the arc on which the calculations have been stopped */
    //private String arcId = "";
    
    /** communication queue among the importing threads and the logging thread **/
    private LinkedBlockingQueue<Message> queue = new LinkedBlockingQueue<Message>();

    public int getLoopCounter() {
        return loopCounter.get();
    }

    public void setLoopCounter(int loopCounter) {
        this.loopCounter = new AtomicInteger(loopCounter);
    }

    public int getErrors() {
        return errors.get();
    }

    public void setErrors(int errors) {
        this.errors = new AtomicInteger(errors);
    }

    /*public String getArcId() {
        return arcId;
    }

    public void setArcId(String arcId) {
        this.arcId = arcId;
    }

    public double getCurrentDistance() {
        return currentDistance;
    }

    public void setCurrentDistance(double currentDistance) {
        this.currentDistance = currentDistance;
    }*/

    
    
	public int getTotal() {
		return total;
	}

	public int getStartErrors() {
		return startErrors;
	}

	public void setStartErrors(int startErrors) {
		this.startErrors = startErrors;
	}

	public void setTotal(int total) {
		this.total = total;
	}

	public void incrementErrors() {
		errors.incrementAndGet();
	}

	public void incrementCounter() {
		loopCounter.incrementAndGet();
	}

	public int getTrace() {
		return trace;
	}

	public void setTrace(int trace) {
		this.trace = trace;
	}

	public void newMessage(Message message) {
		queue.add(message);
	}
	
	public Queue<Message> getMessageQueue() {
		return queue;
	}
}
